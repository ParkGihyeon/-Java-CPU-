import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import java.util.Random;

public class FrameMain 
   extends JFrame
   
   implements ActionListener, ItemListener   {
   
   CustomPanel custumpanel;
   private static final long serialVersionUID = 1L;
      
   List<Job> _jobs;
   Algorithm _algorithm;
   
   List process_name = new ArrayList();
   List process_time = new ArrayList();
   List process_name_temp = new ArrayList();
   List process_time_temp = new ArrayList();

   public CustomPanel chartPanel;
   public JScrollPane chartPane;
   
   Font _font_job;
   
   JLabel _lbl_jobno;
   JComboBox<String> _combo_jobs;

   JLabel _lbl_processname;
   JTextField _txt_processname;
   
   JLabel _lbl_arrival;
   JTextField _txt_arrival;
   
   JLabel _lbl_burst;
   JTextField _txt_burst;
   
   JLabel _lbl_priority;
   JTextField _txt_priority;
   
   CheckboxGroup _cbg_algo;
   Checkbox _cb_FCFS;
   Checkbox _cb_SJF;
   Checkbox _cb_PRIO;
   Checkbox _cb_PPRIO;
   Checkbox _cb_SRT;
   Checkbox _cb_RR;
   Checkbox _cb_HRN;
   
   JButton _btn_add;
   JButton _btn_save;
   JButton _btn_delete;

   JButton _btn_run;
   
   TextArea _txt_result_tt;
   TextArea _txt_result_wt;
   TextArea _txt_result_rt;
   
   public FrameMain()   {
      _jobs = new ArrayList<Job>();
      _algorithm = Algorithm.FCFS;
      initUI();
   }
   
   void initUI()   {
      _font_job = new Font("Times New Roman", Font.PLAIN, 16);
      
      _lbl_jobno = new JLabel("프로세스 번호: ");
      _lbl_jobno.setBounds(20, 34, 100, 20);
      _combo_jobs = new JComboBox<String>();
      _combo_jobs.setBounds(111, 34, 100, 20);
      _combo_jobs.setBackground(Color.LIGHT_GRAY);
      _combo_jobs.addItemListener(this);
      
      _lbl_processname = new JLabel("프로세스ID: ");
      _lbl_processname.setBounds(20, 69, 100, 20);
      _txt_processname = new JTextField();
      _txt_processname.setBounds(111, 69, 100, 20);

      _lbl_arrival = new JLabel("도착 시간: ");
      _lbl_arrival.setBounds(20, 94, 100, 20);
      _txt_arrival = new JTextField();
      _txt_arrival.setBounds(111, 94, 100, 20);
      
      _lbl_burst = new JLabel("서비스 시간: ");
      _lbl_burst.setBounds(20, 119, 100, 20);
      _txt_burst = new JTextField();
      _txt_burst.setBounds(111, 119, 100, 20);
      
      _lbl_priority = new JLabel("우선순위: ");
      _lbl_priority.setBounds(20, 144, 100, 20);
      _txt_priority = new JTextField();
      _txt_priority.setBounds(111, 144, 100, 20);
      
      _cbg_algo = new CheckboxGroup();
      
      _cb_FCFS = new Checkbox("First Come First Serve (FCFS)", true, _cbg_algo);
      _cb_FCFS.setBounds(20, 241, 200, 20);
      _cb_FCFS.addItemListener(this);
      
      _cb_SJF = new Checkbox("Shortest Job First (SJF)", false, _cbg_algo);
      _cb_SJF.setBounds(20, 266, 200, 20);
      _cb_SJF.addItemListener(this);
      
      _cb_PRIO = new Checkbox("비선점 Priority", false, _cbg_algo);
      _cb_PRIO.setBounds(20, 291, 200, 20);
      _cb_PRIO.addItemListener(this);
      
      _cb_PPRIO = new Checkbox("선점 Priority", false, _cbg_algo);
      _cb_PPRIO.setBounds(20, 317, 200, 20);
      _cb_PPRIO.addItemListener(this);
      
      _cb_SRT = new Checkbox("Shortest Remaining Time First (SRT)", false, _cbg_algo);
      _cb_SRT.setBounds(20, 366, 270, 20);
      _cb_SRT.addItemListener(this);
      
      _cb_RR = new Checkbox("Round Robin (RR)", false, _cbg_algo);
      _cb_RR.setBounds(20, 343, 200, 20);
      _cb_RR.addItemListener(this);
      
      _cb_HRN = new Checkbox("Highest Response Rate Next (HRN)", false, _cbg_algo);
      _cb_HRN.setBounds(20, 389, 270, 20);
      _cb_HRN.addItemListener(this);
      
      _btn_add = new JButton("추가");
      _btn_add.setBounds(214, 34, 80, 20);
      _btn_add.setBackground(Color.LIGHT_GRAY);
      _btn_add.addActionListener(this);
      
      _btn_save = new JButton("저장");
      _btn_save.setBounds(20, 174, 191, 31);
      _btn_save.setBackground(Color.LIGHT_GRAY);
      _btn_save.addActionListener(this);
      
      _btn_delete = new JButton("삭제");
      _btn_delete.setBounds(20, 204, 191, 31);
      _btn_delete.setBackground(Color.LIGHT_GRAY);
      _btn_delete.addActionListener(this);
      
      _btn_run = new JButton("실행");
      _btn_run.setBounds(20, 426, 191, 52);
      _btn_run.setBackground(Color.LIGHT_GRAY);
      _btn_run.addActionListener(this);
      
      _txt_result_tt = new TextArea("", 540, 120, TextArea.SCROLLBARS_VERTICAL_ONLY);
      _txt_result_tt.setBounds(840, 174, 260, 189);
      _txt_result_tt.setEditable(false);
      
      _txt_result_wt = new TextArea("", 540, 120, TextArea.SCROLLBARS_VERTICAL_ONLY);
      _txt_result_wt.setBounds(299, 174, 260, 189);
      _txt_result_wt.setEditable(false);
      
      _txt_result_rt = new TextArea("", 540, 120, TextArea.SCROLLBARS_VERTICAL_ONLY);
      _txt_result_rt.setBounds(570, 174, 260, 189);
      _txt_result_rt.setEditable(false);
      getContentPane().setLayout(null);
   
        chartPanel = new CustomPanel();
        chartPanel.setPreferredSize(new Dimension(1200, 10));
        chartPanel.setBackground(Color.WHITE);
        chartPane = new JScrollPane(chartPanel);
        chartPane.setBounds(20, 515, 1080, 120);
      
      getContentPane().add(_lbl_jobno);
      getContentPane().add(_combo_jobs);
      
      getContentPane().add(_lbl_processname);
      getContentPane().add(_txt_processname);
      
      getContentPane().add(_lbl_arrival);
      getContentPane().add(_txt_arrival);
      
      getContentPane().add(_lbl_burst);
      getContentPane().add(_txt_burst);
         
      getContentPane().add(_lbl_priority);
      getContentPane().add(_txt_priority);
      
      getContentPane().add(_cb_FCFS);
      getContentPane().add(_cb_SJF);
      getContentPane().add(_cb_PRIO);
      getContentPane().add(_cb_HRN);
      getContentPane().add(_cb_PPRIO);
      getContentPane().add(_cb_SRT);
      getContentPane().add(_cb_RR);
      
      getContentPane().add(_btn_add);
      getContentPane().add(_btn_save);
      getContentPane().add(_btn_delete);
      
      getContentPane().add(_btn_run);
      
      getContentPane().add(_txt_result_tt);
      getContentPane().add(_txt_result_wt);
      getContentPane().add(_txt_result_rt);
      
      getContentPane().add(chartPane);
         
      this.setSize(1127, 694);
      this.setResizable(false);
      this.setTitle("CPU 스케줄링 알고리즘");
      this.setLocationRelativeTo(null);
      this.setDefaultCloseOperation(EXIT_ON_CLOSE);
      this.setVisible(true);
      
   }
   
   void refreshList()   {
      _combo_jobs.removeAllItems();
      for(int i = 1; i <= _jobs.size(); i++)   {
         _combo_jobs.addItem("No." + i);

      }
   }
   
   void refreshDetails()   {
      if(_jobs.isEmpty())   {
         _txt_processname.setText("");
         _txt_arrival.setText("");
         _txt_burst.setText("");
         _txt_priority.setText("");

         return;
      }
      int index = _combo_jobs.getSelectedIndex();
      if(index < 0)   return;
      _txt_processname.setText("" + _jobs.get(index).getJobName());
      _txt_arrival.setText("" + _jobs.get(index).getArrivalTime());
      _txt_burst.setText("" + _jobs.get(index).getBurstTime());
      _txt_priority.setText("" + _jobs.get(index).getPriority());   
   }

   void drawGanttChart(GanttChart _gantt_chart)   {

      float time;
      float pre_time;
      
      JTextArea _txt = new JTextArea(3, 7);
      _txt.setEditable(false);
      _txt.setText("\n\n\n           0.0");
      _txt.setFont(_font_job);
      _txt.setBackground(getBackground());
      for(int i = 0; i < _gantt_chart.getJobList().size(); i++)   {
         JTextArea txt = new JTextArea(3, 7);
         txt.setEditable(false);

         String sum_time = "";
         String blank = "";

         time = Float.parseFloat(_gantt_chart.getTimeList().get(i));
         
         if(i==0)
            pre_time=0;
         else
            pre_time = Float.parseFloat(_gantt_chart.getTimeList().get(i-1));
         
         for(int j=0; j<time-pre_time; j++) {
            sum_time = sum_time+"=";
            blank = blank+" ";
         }
         
         process_name.add(_gantt_chart.getJobList().get(i));
         process_time.add(time-pre_time);
         
            process_name_temp.clear();
            process_time_temp.clear();
      
         
         txt.setText(_gantt_chart.getJobList().get(i) + "\n" + "\n           " 
                +_gantt_chart.getTimeList().get(i) ) ;         
         txt.setFont(_font_job);
         txt.setBackground(getBackground());
      }
      refreshList();
   }
   
    class CustomPanel extends JPanel
    {   
        @Override
        protected void paintComponent(Graphics g)
        {
            super.paintComponent(g);
            int sum_size=30;
            float timeLine_float = 0;
            int up_down_judge=0;
            
            process_time_temp.addAll(process_time);
            process_time.clear();
            
            process_name_temp.addAll(process_name);
            process_name.clear();
            
            if (process_time != null)
            {               
                for (int i = 0; i < process_time_temp.size(); i++)
                {                 
                    int x = sum_size;
                    int y = 40;
                    
                    float size = Float.parseFloat(process_time_temp.get(i).toString());
                    int size_int = Math.round(size)*40;
                    timeLine_float = timeLine_float  + size;

                    Font font = new Font("돋움",Font.PLAIN,11);
                    g.setFont(font);
                    
                    g.drawRect(x, y, size_int, 30);
                    sum_size = sum_size+size_int;
                    
                    if(up_down_judge % 2 == 1)
                       g.drawString((String) process_name_temp.get(i), x-10, y - 20);
                    else 
                       g.drawString((String) process_name_temp.get(i), x, y - 10);
                    up_down_judge++;
                    
                    g.drawString("0", 20, y+50);
                    g.drawString(Float.toString(timeLine_float), x+size_int, y + 50);

                }
                this.setPreferredSize(new Dimension(sum_size+100, 75));
            }
            repaint();
        }       
    }

   public void actionPerformed(ActionEvent e)   {
      if(e.getSource() == _btn_add)   {
         _jobs.add( 
               new Job(_jobs.size()+1,"", 0, 0, 
                     _jobs.size()+1, Double.POSITIVE_INFINITY)
            );
         refreshList();
         _combo_jobs.setSelectedIndex(_jobs.size()-1);
      }
      if(e.getSource() == _btn_save)   {
         if(_jobs.isEmpty())   return;
         int index = _combo_jobs.getSelectedIndex();

         try {
            _jobs.get(index).setJobName(
                  _txt_processname.getText()
               );
         }catch(Exception ex)   {      
         }
         try {
            _jobs.get(index).setArrivalTime(
                  Double.parseDouble(_txt_arrival.getText())
               );
         }catch(Exception ex)   {      
         }
         try {
            _jobs.get(index).setBurstTime(
                  Double.parseDouble(_txt_burst.getText())
               );
         }catch(Exception ex)   {      
         }

         try {
            _jobs.get(index).setPriority(
                  Double.parseDouble(_txt_priority.getText())
               );
         }catch(Exception ex)   {      
         }
         refreshDetails();
         JOptionPane.showMessageDialog(null, "저장 완료", 
               "저장", JOptionPane.INFORMATION_MESSAGE);
      }
      if(e.getSource() == _btn_delete)   {
         if(_jobs.isEmpty())   return;
         int index = _combo_jobs.getSelectedIndex();
         _jobs.remove(index);
         refreshList();
         JOptionPane.showMessageDialog(null, "삭제 완료", 
               "삭제", JOptionPane.INFORMATION_MESSAGE);
      }
      if(e.getSource() == _btn_run)   {
         
         if(_jobs.isEmpty())   {
            _txt_result_tt.setText("");
            _txt_result_wt.setText("");
            _txt_result_rt.setText("");
            return;
         }
         for(int i = 1; i <= _jobs.size(); i++)
            _jobs.get(i-1).setJobNumber(i);
         CPU_Scheduling _solver = new CPU_Scheduling(_jobs, _algorithm);
         if( _solver.solve() )   {
            _txt_result_tt.setText(_solver.getResultTT());
            _txt_result_wt.setText(_solver.getResultWT());
            _txt_result_rt.setText(_solver.getResultRT());
            drawGanttChart(_solver.getGanttChart());            
         }
      }
   }
   
   public void itemStateChanged(ItemEvent e)   {   
      if(_cb_FCFS.getState())   {
         _algorithm = Algorithm.FCFS;
      }
      if(_cb_SJF.getState())   {
         _algorithm = Algorithm.SJF;
      }
      if(_cb_PRIO.getState())   {
         _algorithm = Algorithm.Prio;
      }
      if(_cb_PPRIO.getState())   {
         _algorithm = Algorithm.PPrio;
      }
      if(_cb_SRT.getState())   {
         _algorithm = Algorithm.SRT;
      }
      if(_cb_RR.getState())   {
         _algorithm = Algorithm.RR;
      }
      if(_cb_HRN.getState())   {
         _algorithm = Algorithm.HRN;
      }
      refreshDetails();
   }

   public static void main(String[] args) {
      new FrameMain();
   }
}